using Oprazi.Dal.DataContext;
using Oprazi.Dal.Repositories.IRepositories;
using Oprazi.Entity.Entities;
using System;
using System.Collections.Generic;
using System.Text;
using Oprazi.Entity.Models;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace Oprazi.Dal.Repositories
{
    public class zg-singularize(((zg-entity...zg-name)))Repository : GenericRepository<zg-singularize(((zg-entity...zg-name)))>, Izg-singularize(((zg-entity...zg-name)))Repository
    {
        private readonly AspNetCoreNTierDbContext _aspNetCoreNTierDbContext;
        public zg-singularize(((zg-entity...zg-name)))Repository(AspNetCoreNTierDbContext aspNetCoreNTierDbContext) : base(aspNetCoreNTierDbContext)
        {
            _aspNetCoreNTierDbContext = aspNetCoreNTierDbContext;
        }
        
        public async Task<zg-singularize(((zg-entity...zg-name)))ResponseModel> Getzg-singularize(((zg-entity...zg-name)))List(zg-singularize(((zg-entity...zg-name)))FilterModel filter)
        {
            var zg-pluralize(((zg-entity...zg-name))) = (from zg-lower(((zg-entity...zg-name))) in _aspNetCoreNTierDbContext.Set<zg-singularize(((zg-entity...zg-name)))>()
                    zg-for(((zg-item:::[[[zg-entity...zg-fkFields]]]))){{{
                    join zg-lower(((zg-item...zg-referencedEntity...zg-name))) in _aspNetCoreNTierDbContext.Set<zg-singularize(((zg-item...zg-referencedEntity...zg-name)))>() on zg-lower(((zg-entity...zg-name))).[[[zg-item...zg-name]]] equals zg-lower(((zg-item...zg-referencedEntity...zg-name))).Id
                    }}}
                    where zg-lower(((zg-entity...zg-name))).Status == 1
                    zg-if(((zg-entity...zg-nonKeyFields...zg-count!====zg-toStr(((0)))))){{{
                    &&
                     (zg-for(((zg-item:::[[[zg-entity...zg-nonKeyFields]]]))){{{
                            zg-if(((zg-item...zg-targetType=====zg-toStr(((String)))))){{{zg-notFirst(((||)))(filter.Search == null || zg-lower(((zg-entity...zg-name))).[[[zg-item...zg-name]]].Contains(filter.Search))}}}
                            zg-if(((zg-item...zg-targetType!====zg-toStr(((String)))))){{{zg-notFirst(((||)))(filter.Search == null || Convert.ToString(zg-lower(((zg-entity...zg-name))).[[[zg-item...zg-name]]]) == filter.Search)}}}
                            }}}
                     )
                    }}}
                    select new zg-singularize(((zg-entity...zg-name)))ListModel
                    {   zg-for(((zg-item:::[[[zg-entity...zg-fields]]]))){{{
                        [[[zg-item...zg-name]]] = zg-lower(((zg-entity...zg-name))).[[[zg-item...zg-name]]],
                        }}}zg-for(((zg-item:::[[[zg-entity...zg-fkFields]]]))){{{
                        [[[zg-item...zg-referencedEntity...zg-name]]]Name = zg-lower(((zg-item...zg-referencedEntity...zg-name))).Name,
                        }}}
                    });
                
            var response = new zg-singularize(((zg-entity...zg-name)))ResponseModel();
            response.Data = zg-pluralize(((zg-entity...zg-name))).Skip(filter.Page != null && filter.Items_Per_Page != null ? (Convert.ToInt32(filter.Page) - 1) * Convert.ToInt32(filter.Items_Per_Page) : 0)
                    .Take(filter.Items_Per_Page != null ? Convert.ToInt32(filter.Items_Per_Page) : 100)
                    .ToList(); ;
            response.Payload = new Payload();
            response.Payload.Pagination = new Pagination();
            if (filter.Page != null)
                response.Payload.Pagination.Page = Convert.ToInt32(filter.Page);
            response.Payload.Pagination.First_Page_Url = "/?page=1";
            response.Payload.Pagination.From = 1;
            if(filter.Items_Per_Page != null)
                response.Payload.Pagination.Last_Page = Convert.ToInt32(Math.Ceiling(zg-pluralize(((zg-entity...zg-name))).Count()/Convert.ToDecimal(filter.Items_Per_Page)) );

            response.Payload.Pagination.Links = new List<Link>();

            int paginationBeginPage = 0;
            if (filter.Page != null)
                paginationBeginPage = (Convert.ToInt32(filter.Page) - 1) / 10 * 10;

            int paginationEndPage = (paginationBeginPage + 10);
            if (response.Payload.Pagination.Last_Page < paginationEndPage)
                paginationEndPage = response.Payload.Pagination.Last_Page;

            response.Payload.Pagination.Links.Add(new Link
            {
                Url = "/?page=" + (paginationBeginPage == 0 ? null : (paginationBeginPage - 10 + 1)),
                Label = "&laquo; Previous",
                Active = false,
                Page = (paginationBeginPage == 0 ? null : (paginationBeginPage - 10 + 1))
            });            

            for (int i = paginationBeginPage; i < paginationEndPage; i++)
            {
                response.Payload.Pagination.Links.Add(new Link
                {
                    Url = "/?page=" + (i + 1),
                    Label = Convert.ToString(i + 1),
                    Active = Convert.ToInt32(filter.Page) == (i+1),
                    Page = (i + 1)
                });
            }

            response.Payload.Pagination.Links.Add(new Link
            {
                Url = response.Payload.Pagination.Last_Page > (paginationBeginPage + 10) ? "/?page=" + (paginationBeginPage + 11) : null,
                Label = "Next &raquo;",
                Active = false,
                Page = response.Payload.Pagination.Last_Page > (paginationBeginPage + 10) ? (paginationBeginPage + 11) : null
            });

            if (filter.Page != null)
                response.Payload.Pagination.Next_Page_Url = "/?page=" + (Convert.ToInt32(filter.Page) + 1);
            if (filter.Items_Per_Page != null)
                response.Payload.Pagination.Items_Per_Page = Convert.ToInt32(filter.Items_Per_Page);
            if (filter.Page != null)
                response.Payload.Pagination.Prev_Page_Url = Convert.ToInt32(filter.Page) > 1 ? "/?page=" + (Convert.ToInt32(filter.Page) - 1) : null;
            response.Payload.Pagination.To = 10;
            response.Payload.Pagination.Total = zg-pluralize(((zg-entity...zg-name))).Count();

            return response;
        }
    }
}
